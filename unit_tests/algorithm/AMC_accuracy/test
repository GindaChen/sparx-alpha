#!/bin/bash

# The testing model : shu1d or cosine
MODEL=shu1d
# FullyRandom / QuasiRandom
RandomMode=FullyRandom


NSNR=${#REQUEST_SNR[@]}

if [ $RandomMode == 'FullyRandom' ];then
  MODE="qmc='False'"
  Nrun=10
  REQUEST_SNR=(10 15 20 30 40 50 60 80 100)
elif [ $RandomMode == 'QuasiRandom' ];then
  MODE="qmc='True'"
  DAT=RAYS_QMC.dat
  Nrun=1
  REQUEST_SNR=(10 15 20 30 40 50 60 80 100 200 400 800)
fi

# generating model
rm -rf model
if [ $MODEL == 'shu1d' ]; then
  sparx run task_shu1d \
  out=model \
  abundance=1e-9
elif [ $MODEL == 'cosine' ]; then
  sparx run task_cosine1d \
  out=model \
  abundance=1e-8
fi

FILENAME=$MODEL$RandomMode

for j in `seq $Nrun`
do
  
  output=$FILENAME'_'$j
  
  DAT=$FILENAME'RAYS_'$j'.dat'
  rm -f $DAT

  for i in `seq 0 $((NSNR-1))`
  do
    SNR=${REQUEST_SNR[$i]}
    case='_snr_'$SNR
    # take previous snr run as initial condition
    if [ $i != 0 ]; then 
      POPS='pops='$output'_snr_'${REQUEST_SNR[$((i-1))]} 
    else
      POPS=''
    fi
    # run AMC
    rm -f $output$case
    sparx run task_amc \
    source=model \
    $POPS \
    out=$output$case \
    molec='hco+' \
    snr=$SNR \
    nrays=50 \
    raniter=1 \
    fixiter=1 \
    $MODE \
    | tee $output$case.log
    
    # grep numer of rays using in this case
    RAYS=`grep 'rays' $output$case.log | grep -v 'Iterating for convergence' | tail -n 1 | sed -e 's/rays//g' -e 's/.*->//g'`
    echo $SNR $RAYS | tee -a $ $DAT 
  done
done