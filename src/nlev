sparx-io.c:	#define CPYPP(attr) (zone_data.attr = pp->attr)
sparx-io.c:	strncpy(zone_data.kapp_d, pp->kapp_d, ZoneH5_KAPPLEN);
sparx-io.c:	strncpy(zone_data.kapp_ff, pp->kapp_ff, ZoneH5_KAPPLEN);
sparx-io.c:		Mem_MEMCPY(&zone_data.vedge[i][0], pp->v_edge[i].x, 3);
sparx-io.c:                zone_data.v_cen[i] = GeVec3_X(pp->v_cen, i);
sparx-io.c:                zone_data.b_cen[i] = GeVec3_X(pp->b_cen, i);
sparx-io.c:	#define CPYPP(attr) (pp->attr = record.attr)
sparx-io.c:	strncpy(pp->kapp_d, record.kapp_d, ZoneH5_KAPPLEN);
sparx-io.c:	strncpy(pp->kapp_ff, record.kapp_ff, ZoneH5_KAPPLEN);
sparx-io.c:		Mem_MEMCPY(pp->v_edge[i].x, &record.vedge[i][0], 3);
sparx-io.c:	Mem_MEMCPY(pp->v_cen.x, record.v_cen, 3);
sparx-io.c:	Mem_MEMCPY(pp->b_cen.x, record.b_cen, 3);
sparx-io.c:	if(pp->mol)
sparx-io.c:	if(pp->mol)
sparx-io.c:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c:	Deb_ASSERT(pp->pops[0] != NULL);
sparx-io.c:		nlev = pp->mol->nlev,
sparx-io.c:			POPS(i, j) = pp->pops[0][j];
sparx-io.c:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c:	Deb_ASSERT(pp->pops[0] != NULL);
sparx-io.c:		nlev = pp->mol->nlev,
sparx-io.c:			pp->pops[0][j] = POPS(i, j);
sparx-io.c:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c:	Deb_ASSERT(pp->tau != NULL);
sparx-io.c:		nrad = pp->mol->nrad,
sparx-io.c:			TAU(i, j) = pp->tau[j];
sparx-io.c:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c:	Deb_ASSERT(pp->tau != NULL);
sparx-io.c:		nrad = pp->mol->nrad,
sparx-io.c:			pp->tau[j] = TAU(i, j);
sparx-io.c~:	#define CPYPP(attr) (zone_data.attr = pp->attr)
sparx-io.c~:	strncpy(zone_data.kapp_d, pp->kapp_d, ZoneH5_KAPPLEN);
sparx-io.c~:	strncpy(zone_data.kapp_ff, pp->kapp_ff, ZoneH5_KAPPLEN);
sparx-io.c~:		Mem_MEMCPY(&zone_data.vedge[i][0], pp->v_edge[i].x, 3);
sparx-io.c~:                zone_data.v_cen[i] = GeVec3_X(pp->v_cen, i);
sparx-io.c~:                zone_data.b_cen[i] = GeVec3_X(pp->b_cen, i);
sparx-io.c~:	#define CPYPP(attr) (pp->attr = record.attr)
sparx-io.c~:	strncpy(pp->kapp_d, record.kapp_d, ZoneH5_KAPPLEN);
sparx-io.c~:	strncpy(pp->kapp_ff, record.kapp_ff, ZoneH5_KAPPLEN);
sparx-io.c~:		Mem_MEMCPY(pp->v_edge[i].x, &record.vedge[i][0], 3);
sparx-io.c~:	Mem_MEMCPY(pp->v_cen.x, record.v_cen, 3);
sparx-io.c~:	Mem_MEMCPY(pp->b_cen.x, record.b_cen, 3);
sparx-io.c~:	if(pp->mol)
sparx-io.c~:	if(pp->mol)
sparx-io.c~:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c~:	Deb_ASSERT(pp->pops[0] != NULL);
sparx-io.c~:		nlev = pp->mol->nlev,
sparx-io.c~:			POPS(i, j) = pp->pops[0][j];
sparx-io.c~:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c~:	Deb_ASSERT(pp->pops[0] != NULL);
sparx-io.c~:		nlev = pp->mol->nlev,
sparx-io.c~:			pp->pops[0][j] = POPS(i, j);
sparx-io.c~:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c~:	Deb_ASSERT(pp->tau != NULL);
sparx-io.c~:		nrad = pp->mol->nrad,
sparx-io.c~:			TAU(i, j) = pp->tau[j];
sparx-io.c~:	Deb_ASSERT(pp->mol != NULL);
sparx-io.c~:	Deb_ASSERT(pp->tau != NULL);
sparx-io.c~:		nrad = pp->mol->nrad,
sparx-io.c~:			pp->tau[j] = TAU(i, j);
sparx-model.c:			pp->n_H2 = n_H2;
sparx-model.c:			pp->T_k = T_k;
sparx-model.c:			pp->X_mol = X_mol;
sparx-model.c:			pp->v_cen.x[0] = 0;
sparx-model.c:			pp->v_cen.x[1] = 0;
sparx-model.c:			pp->v_cen.x[2] = 0;
sparx-physics.c:	pp->zp = zp;
sparx-physics.c:			pp->velfield = parms->velfield;
sparx-physics.c:			pp->velfield = NULL;
sparx-physics.c:		if(pp->pops[i])
sparx-physics.c:			free(pp->pops[i]);
sparx-physics.c:	if(pp->cmat)
sparx-physics.c:		free(pp->cmat);
sparx-physics.c:	if(pp->tau)
sparx-physics.c:		free(pp->tau);
sparx-physics.c:	if(pp->cont)
sparx-physics.c:		free(pp->cont);
sparx-physics.c:		Deb_ASSERT(pp->mol == NULL);
sparx-physics.c:		Deb_ASSERT(pp->tau == NULL);
sparx-physics.c:	pp->mol = mol;
sparx-physics.c:			Deb_ASSERT(pp->pops[i] == NULL);
sparx-physics.c:			pp->pops[i] = Mem_CALLOC(mol->nlev, pp->pops[i]);
sparx-physics.c:	pp->tau = Mem_CALLOC(mol->nrad, pp->tau);
sparx-physics.c:	//pp->J_bar = Mem_CALLOC(mol->nrad, pp->J_bar);
sparx-physics.c:	if(pp->cont)
sparx-physics.c:		free(pp->cont);
sparx-physics.c:	pp->ncont = nfreq;
sparx-physics.c:	pp->cont = Mem_CALLOC(nfreq, pp->cont);
sparx-physics.c:		pp->cont[i].freq = freq[i];
sparx-physics.c:		pp->cont[i].lambda = PHYS_CONST_MKS_LIGHTC / freq[i];
sparx-physics.c:	Deb_ASSERT(pp->mol != NULL);
sparx-physics.c:	Deb_ASSERT(pp->cmat == NULL);
sparx-physics.c:	#define NLEV (pp->mol->nlev)
sparx-physics.c:	#define COL(i) (pp->mol->col[(i)])
sparx-physics.c:	#define CMAT(i, j) (pp->cmat[(j) + NLEV * (i)])
sparx-physics.c:	pp->cmat = Mem_CALLOC(NLEV * NLEV, pp->cmat);
sparx-physics.c:	for(i = 0; i < pp->mol->ncol; i++) {
sparx-physics.c:		itmp = gsl_interp_bsearch(COL(i)->tmp, pp->T_k, (size_t)0, COL(i)->ntmp);
sparx-physics.c:			else if(pp->T_k < TMP(i, 0)) {
sparx-physics.c:				K_ul = Num_InterpLinear(pp->T_k, TMP(i, itmp), TMP(i, itmp + 1), TR(i, j)->K_ul[itmp], TR(i, j)->K_ul[itmp + 1]);
sparx-physics.c:			CMAT(i, j) = CMAT(j, i) * SpPhys_BoltzRatio(pp->mol, j, i, pp->T_k);
sparx-physics.c:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c:		nrad = pp->ncont;
sparx-physics.c:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c:		nrad = pp->mol->nrad;
sparx-physics.c:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c:		pp->cont[i].I_bb = Phys_PlanckFunc(FREQ(i), T_bb) / I_norm;
sparx-physics.c:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c:		nrad = pp->ncont;
sparx-physics.c:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c:		nrad = pp->mol->nrad;
sparx-physics.c:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c:		pp->cont[i].j += j_nu;
sparx-physics.c:		pp->cont[i].k += k_nu;
sparx-physics.c:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU) / gas_to_dust;
sparx-physics.c:	kap = SpIO_LoadKappa(pp->kapp_d);
sparx-physics.c:	SpPhys_AddContinuum(pp, cont, pp->T_d, kap, rho);
sparx-physics.c:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c:	kap = SpIO_LoadKappa(pp->kapp_ff);
sparx-physics.c:	SpPhys_AddContinuum(pp, cont, pp->T_ff, kap, rho);
sparx-physics.c:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c:	Deb_ASSERT(pp->bbsrc.nu0 > 0);
sparx-physics.c:		nrad = pp->ncont;
sparx-physics.c:		nrad = pp->mol->nrad;
sparx-physics.c:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c:		k_nu = pp->bbsrc.kappa0 * pow(FREQ(i) / pp->bbsrc.nu0, pp->bbsrc.beta) * rho;
sparx-physics.c:		j_nu = Phys_PlanckFunc(FREQ(i), pp->bbsrc.T_bb) * k_nu;
sparx-physics.c:		pp->cont[i].j += j_nu;
sparx-physics.c:		pp->cont[i].k += k_nu;
sparx-physics.c:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c:		nrad = pp->ncont;
sparx-physics.c:		nrad = pp->mol->nrad;
sparx-physics.c:	rho_dust = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU) / gas_to_dust;
sparx-physics.c:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c:		j_nu = Phys_PlanckFunc(FREQ(i), pp->T_k) * k_nu;
sparx-physics.c:		pp->cont[i].j += j_nu;
sparx-physics.c:		pp->cont[i].k += k_nu;
sparx-physics.c:	Deb_ASSERT(pp->kappa != NULL);
sparx-physics.c:		nrad = pp->ncont;
sparx-physics.c:		nrad = pp->mol->nrad;
sparx-physics.c:	rho_dust = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c:		j_nu = Phys_PlanckFunc(FREQ(i), pp->T_k) * k_nu;
sparx-physics.c:		pp->cont[i].j += j_nu;
sparx-physics.c:		pp->cont[i].k += k_nu;
sparx-physics.c:			return pp->n_H2;
sparx-physics.c:			return pp->n_H2 * pp->X_pH2;
sparx-physics.c:			return pp->n_H2 * pp->X_oH2;
sparx-physics.c:			return pp->n_H2 * pp->X_e;
sparx-physics.c:			return pp->n_H2 * pp->X_H;
sparx-physics.c:			return pp->n_H2 * pp->X_He;
sparx-physics.c:		pp->n_H2, pp->T_k, pp->X_mol, pp->width, strlen(pp->kapp_d) > 0 ? pp->kapp_d : "None");
sparx-physics.c:	if(pp->mol) {
sparx-physics.c:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c:		for(i = 0; i < pp->mol->nlev; i++) {
sparx-physics.c:			fprintf(fp, " %5lu|%20g\n", (unsigned long)i, pp->pops[0][i]);
sparx-physics.c:	nbytes += Mem_FWRITE(&pp->n_H2, 1, fp);
sparx-physics.c:	nbytes += Mem_FWRITE(&pp->T_k, 1, fp);
sparx-physics.c:	nbytes += Mem_FWRITE(&pp->X_mol, 1, fp);
sparx-physics.c:	nbytes += Mem_FWRITE(&pp->width, 1, fp);
sparx-physics.c:	if(pp->mol) {
sparx-physics.c:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c:		nbytes += Mem_FWRITE(pp->pops[0], pp->mol->nlev, fp);
sparx-physics.c:	nbytes += Mem_FREAD(&pp->n_H2, 1, fp);
sparx-physics.c:	nbytes += Mem_FREAD(&pp->T_k, 1, fp);
sparx-physics.c:	nbytes += Mem_FREAD(&pp->X_mol, 1, fp);
sparx-physics.c:	nbytes += Mem_FREAD(&pp->width, 1, fp);
sparx-physics.c:	if(pp->mol) {
sparx-physics.c:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c:		nbytes += Mem_FREAD(pp->pops[0], pp->mol->nlev, fp);
sparx-physics.c:	const MolTrRad *trans = pp->mol->rad[tr];
sparx-physics.c:		n_u = pp->pops[tid][trans->up],
sparx-physics.c:		n_l = pp->pops[tid][trans->lo],
sparx-physics.c:		factor = KONST * pp->n_H2 * pp->X_mol * nu * (c / (pp->width * nu * sqrt(pi))) * vfac;
sparx-physics.c:	printf("factor=%10.4e, n_H2=%10.4e, X_mol=%10.4e\n", factor, pp->n_H2, pp->X_mol);
sparx-physics.c:			v_gas = GeVec3_Scale(&v_gas, GeVec3_X(pp->v_cen, 0));
sparx-physics.c:			vr = GeVec3_Scale(&vr, GeVec3_X(pp->v_cen, 0));
sparx-physics.c:			vt = GeVec3_Scale(&vt, GeVec3_X(pp->v_cen, 1));
sparx-physics.c:			vp = GeVec3_Scale(&vp, GeVec3_X(pp->v_cen, 2));
sparx-physics.c:			v_gas = pp->v_cen;
sparx-physics.c:			b_gas = GeVec3_Scale(&b_gas, GeVec3_X(pp->b_cen, 0));
sparx-physics.c:			br = GeVec3_Scale(&br, GeVec3_X(pp->b_cen, 0));
sparx-physics.c:			bt = GeVec3_Scale(&bt, GeVec3_X(pp->b_cen, 1));
sparx-physics.c:			bp = GeVec3_Scale(&bp, GeVec3_X(pp->b_cen, 2));
sparx-physics.c:			b_gas = pp->b_cen;
sparx-physics.c:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c:	n_step = Num_MAX((size_t)(GeVec3_Mag2(&v_1, &v_0) / pp->width), 1);
sparx-physics.c:		n_avg = Num_MAX((size_t)(GeVec3_Mag2(&v_1, &v_0) / pp->width), 1);
sparx-physics.c:			vfac += Num_GaussNormal(v_los - GeVec3_DotProd(&v, &ray->d), pp->width) / (double)n_avg;
sparx-physics.c:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c:	V_th = Phys_ThermLineWidth(pp->T_k, pp->mol->weight);
sparx-physics.c:	V_t = pp->V_t;
sparx-physics.c~:	pp->zp = zp;
sparx-physics.c~:			pp->velfield = parms->velfield;
sparx-physics.c~:			pp->velfield = NULL;
sparx-physics.c~:		if(pp->pops[i])
sparx-physics.c~:			free(pp->pops[i]);
sparx-physics.c~:	if(pp->cmat)
sparx-physics.c~:		free(pp->cmat);
sparx-physics.c~:	if(pp->tau)
sparx-physics.c~:		free(pp->tau);
sparx-physics.c~:	if(pp->cont)
sparx-physics.c~:		free(pp->cont);
sparx-physics.c~:		Deb_ASSERT(pp->mol == NULL);
sparx-physics.c~:		Deb_ASSERT(pp->tau == NULL);
sparx-physics.c~:	pp->mol = mol;
sparx-physics.c~:			Deb_ASSERT(pp->pops[i] == NULL);
sparx-physics.c~:			pp->pops[i] = Mem_CALLOC(mol->nlev, pp->pops[i]);
sparx-physics.c~:	pp->tau = Mem_CALLOC(mol->nrad, pp->tau);
sparx-physics.c~:	//pp->J_bar = Mem_CALLOC(mol->nrad, pp->J_bar);
sparx-physics.c~:	if(pp->cont)
sparx-physics.c~:		free(pp->cont);
sparx-physics.c~:	pp->ncont = nfreq;
sparx-physics.c~:	pp->cont = Mem_CALLOC(nfreq, pp->cont);
sparx-physics.c~:		pp->cont[i].freq = freq[i];
sparx-physics.c~:		pp->cont[i].lambda = PHYS_CONST_MKS_LIGHTC / freq[i];
sparx-physics.c~:	Deb_ASSERT(pp->mol != NULL);
sparx-physics.c~:	Deb_ASSERT(pp->cmat == NULL);
sparx-physics.c~:	#define NLEV (pp->mol->nlev)
sparx-physics.c~:	#define COL(i) (pp->mol->col[(i)])
sparx-physics.c~:	#define CMAT(i, j) (pp->cmat[(j) + NLEV * (i)])
sparx-physics.c~:	pp->cmat = Mem_CALLOC(NLEV * NLEV, pp->cmat);
sparx-physics.c~:	for(i = 0; i < pp->mol->ncol; i++) {
sparx-physics.c~:		itmp = gsl_interp_bsearch(COL(i)->tmp, pp->T_k, (size_t)0, COL(i)->ntmp);
sparx-physics.c~:			else if(pp->T_k < TMP(i, 0)) {
sparx-physics.c~:				K_ul = Num_InterpLinear(pp->T_k, TMP(i, itmp), TMP(i, itmp + 1), TR(i, j)->K_ul[itmp], TR(i, j)->K_ul[itmp + 1]);
sparx-physics.c~:			CMAT(i, j) = CMAT(j, i) * SpPhys_BoltzRatio(pp->mol, j, i, pp->T_k);
sparx-physics.c~:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c~:		nrad = pp->ncont;
sparx-physics.c~:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c~:		nrad = pp->mol->nrad;
sparx-physics.c~:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c~:		pp->cont[i].I_bb = Phys_PlanckFunc(FREQ(i), T_bb) / I_norm;
sparx-physics.c~:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c~:		nrad = pp->ncont;
sparx-physics.c~:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c~:		nrad = pp->mol->nrad;
sparx-physics.c~:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c~:		pp->cont[i].j += j_nu;
sparx-physics.c~:		pp->cont[i].k += k_nu;
sparx-physics.c~:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU) / gas_to_dust;
sparx-physics.c~:	kap = SpIO_LoadKappa(pp->kapp_d);
sparx-physics.c~:	SpPhys_AddContinuum(pp, cont, pp->T_d, kap, rho);
sparx-physics.c~:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c~:	kap = SpIO_LoadKappa(pp->kapp_ff);
sparx-physics.c~:	SpPhys_AddContinuum(pp, cont, pp->T_ff, kap, rho);
sparx-physics.c~:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c~:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c~:	Deb_ASSERT(pp->bbsrc.nu0 > 0);
sparx-physics.c~:		nrad = pp->ncont;
sparx-physics.c~:		nrad = pp->mol->nrad;
sparx-physics.c~:	rho = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c~:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c~:		k_nu = pp->bbsrc.kappa0 * pow(FREQ(i) / pp->bbsrc.nu0, pp->bbsrc.beta) * rho;
sparx-physics.c~:		j_nu = Phys_PlanckFunc(FREQ(i), pp->bbsrc.T_bb) * k_nu;
sparx-physics.c~:		pp->cont[i].j += j_nu;
sparx-physics.c~:		pp->cont[i].k += k_nu;
sparx-physics.c~:		Deb_ASSERT(pp->cont != NULL);
sparx-physics.c~:		Deb_ASSERT(pp->mol != NULL);
sparx-physics.c~:		nrad = pp->ncont;
sparx-physics.c~:		nrad = pp->mol->nrad;
sparx-physics.c~:	rho_dust = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU) / gas_to_dust;
sparx-physics.c~:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c~:		j_nu = Phys_PlanckFunc(FREQ(i), pp->T_k) * k_nu;
sparx-physics.c~:		pp->cont[i].j += j_nu;
sparx-physics.c~:		pp->cont[i].k += k_nu;
sparx-physics.c~:	Deb_ASSERT(pp->kappa != NULL);
sparx-physics.c~:		nrad = pp->ncont;
sparx-physics.c~:		nrad = pp->mol->nrad;
sparx-physics.c~:	rho_dust = (pp->n_H2 * 2.8 * PHYS_UNIT_MKS_AMU);
sparx-physics.c~:		(cont ? pp->cont[i].freq : pp->mol->rad[i]->freq)
sparx-physics.c~:		j_nu = Phys_PlanckFunc(FREQ(i), pp->T_k) * k_nu;
sparx-physics.c~:		pp->cont[i].j += j_nu;
sparx-physics.c~:		pp->cont[i].k += k_nu;
sparx-physics.c~:			return pp->n_H2;
sparx-physics.c~:			return pp->n_H2 * pp->X_pH2;
sparx-physics.c~:			return pp->n_H2 * pp->X_oH2;
sparx-physics.c~:			return pp->n_H2 * pp->X_e;
sparx-physics.c~:			return pp->n_H2 * pp->X_H;
sparx-physics.c~:			return pp->n_H2 * pp->X_He;
sparx-physics.c~:		pp->n_H2, pp->T_k, pp->X_mol, pp->width, strlen(pp->kapp_d) > 0 ? pp->kapp_d : "None");
sparx-physics.c~:	if(pp->mol) {
sparx-physics.c~:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c~:		for(i = 0; i < pp->mol->nlev; i++) {
sparx-physics.c~:			fprintf(fp, " %5lu|%20g\n", (unsigned long)i, pp->pops[0][i]);
sparx-physics.c~:	nbytes += Mem_FWRITE(&pp->n_H2, 1, fp);
sparx-physics.c~:	nbytes += Mem_FWRITE(&pp->T_k, 1, fp);
sparx-physics.c~:	nbytes += Mem_FWRITE(&pp->X_mol, 1, fp);
sparx-physics.c~:	nbytes += Mem_FWRITE(&pp->width, 1, fp);
sparx-physics.c~:	if(pp->mol) {
sparx-physics.c~:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c~:		nbytes += Mem_FWRITE(pp->pops[0], pp->mol->nlev, fp);
sparx-physics.c~:	nbytes += Mem_FREAD(&pp->n_H2, 1, fp);
sparx-physics.c~:	nbytes += Mem_FREAD(&pp->T_k, 1, fp);
sparx-physics.c~:	nbytes += Mem_FREAD(&pp->X_mol, 1, fp);
sparx-physics.c~:	nbytes += Mem_FREAD(&pp->width, 1, fp);
sparx-physics.c~:	if(pp->mol) {
sparx-physics.c~:		Deb_ASSERT(pp->pops[0] != 0);
sparx-physics.c~:		nbytes += Mem_FREAD(pp->pops[0], pp->mol->nlev, fp);
sparx-physics.c~:	const MolTrRad *trans = pp->mol->rad[tr];
sparx-physics.c~:		n_u = pp->pops[tid][trans->up],
sparx-physics.c~:		n_l = pp->pops[tid][trans->lo],
sparx-physics.c~:		factor = KONST * pp->n_H2 * pp->X_mol * nu * (c / (pp->width * nu * sqrt(pi))) * vfac;
sparx-physics.c~:	printf("factor=%10.4e, n_H2=%10.4e, X_mol=%10.4e\n", factor, pp->n_H2, pp->X_mol);
sparx-physics.c~:			v_gas = GeVec3_Scale(&v_gas, GeVec3_X(pp->v_cen, 0));
sparx-physics.c~:			vr = GeVec3_Scale(&vr, GeVec3_X(pp->v_cen, 0));
sparx-physics.c~:			vt = GeVec3_Scale(&vt, GeVec3_X(pp->v_cen, 1));
sparx-physics.c~:			vp = GeVec3_Scale(&vp, GeVec3_X(pp->v_cen, 2));
sparx-physics.c~:			v_gas = pp->v_cen;
sparx-physics.c~:			b_gas = GeVec3_Scale(&b_gas, GeVec3_X(pp->b_cen, 0));
sparx-physics.c~:			br = GeVec3_Scale(&br, GeVec3_X(pp->b_cen, 0));
sparx-physics.c~:			bt = GeVec3_Scale(&bt, GeVec3_X(pp->b_cen, 1));
sparx-physics.c~:			bp = GeVec3_Scale(&bp, GeVec3_X(pp->b_cen, 2));
sparx-physics.c~:			b_gas = pp->b_cen;
sparx-physics.c~:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c~:	n_step = Num_MAX((size_t)(GeVec3_Mag2(&v_1, &v_0) / pp->width), 1);
sparx-physics.c~:		n_avg = Num_MAX((size_t)(GeVec3_Mag2(&v_1, &v_0) / pp->width), 1);
sparx-physics.c~:			vfac += Num_GaussNormal(v_los - GeVec3_DotProd(&v, &ray->d), pp->width) / (double)n_avg;
sparx-physics.c~:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c~:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c~:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c~:	//return Num_GaussNormal(SpPhys_GetVfunc(ray, dt, v_los, zone), pp->width);
sparx-physics.c~:			GeVec3_Mag(&pp->v_cen) / 1000.0);
sparx-physics.c~:	V_th = Phys_ThermLineWidth(pp->T_k, pp->mol->weight);
sparx-physics.c~:	V_t = pp->V_t;
sparx-task-26ray.c:		if((pp->n_H2 > 0) && !zp->children) {
sparx-task-26ray.c:			pp->non_empty_leaf = 1;
sparx-task-26ray.c:			if(pp->X_mol > 0) {
sparx-task-26ray.c:				pp->has_tracer = 1;
sparx-task-26ray.c:		if(pp->non_empty_leaf) {
sparx-task-26ray.c:			if(pp->has_tracer) {
sparx-task-26ray.c:				pp->nray = glb.nray;
sparx-task-26ray.c:				pp->diff = 0.0;
sparx-task-26ray.c:				pp->converged=0;
sparx-task-26ray.c:				pp->width = SpPhys_CalcLineWidth(pp);
sparx-task-26ray.c:				for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-26ray.c:							pp->pops[k][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-26ray.c:							pp->pops[k][j] = (j == 0) ? 1.0 : 0.0;
sparx-task-26ray.c:			if(pp->T_d > 0) {
sparx-task-26ray.c:			if(pp->T_ff > 0) {
sparx-task-26ray.c:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[0]);}
sparx-task-26ray.c:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[3]);}
sparx-task-26ray.c:						if(pp->non_empty_leaf){
sparx-task-26ray.c:							pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],\
sparx-task-26ray.c:							pp->pops[0][6],pp->pops[0][7],pp->pops[0][8]);
sparx-task-26ray.c:					 	fprintf(fp,"%11.4e\n",pp->diff);
sparx-task-26ray.c:					 	fprintf(fp,"%8zu\n",pp->nray);
sparx-task-26ray.c:					 	fprintf(fp,"%1zu\n",pp->converged );
sparx-task-26ray.c:		 	fprintf(fp,"%11.4e\n",pp->n_H2);
sparx-task-26ray.c:		 	fprintf(fp,"%11.4e %11.4e %11.4e\n",pp->v_cen.x[0],pp->v_cen.x[1],pp->v_cen.x[2]);
sparx-task-26ray.c:			     	popsold[i]=pp->pops[tid][i];
sparx-task-26ray.c:		ds0 = Mem_CALLOC(pp->nray, ds0);
sparx-task-26ray.c:		vfac0 = Mem_CALLOC(pp->nray, vfac0);
sparx-task-26ray.c:		intensity = Mem_CALLOC(pp->nray * NRAD, intensity);
sparx-task-26ray.c:		tau = Mem_CALLOC(pp->nray * NRAD, tau);
sparx-task-26ray.c:				for(i = 0; i < pp->nray; i++) {
sparx-task-26ray.c:					vel = (XI() - 0.5) * 4.3 * pp->width;
sparx-task-26ray.c:					vfac0[i] = Num_GaussNormal(vel, pp->width);
sparx-task-26ray.c:					HIST(ihist, i) = pp->pops[tid][i];
sparx-task-26ray.c:			pp->diff=diff;
sparx-task-26ray.c:			     	if(pp->pops[tid][i]>glb.minpop){
sparx-task-26ray.c:					temp = fabs( pp->pops[tid][i] - popsold[i] ) / pp->pops[tid][i];
sparx-task-26ray.c:				pp->converged=0;
sparx-task-26ray.c:				pp->converged=1;
sparx-task-26ray.c:				pp->nray *= 4;
sparx-task-26ray.c:			//pp->nray += (size_t)(0.01 * glb.nray);
sparx-task-26ray.c:			pp->nray *= 4;
sparx-task-26ray.c:		if(pp->nray > MAXRAYS) {
sparx-task-26ray.c:			pp->nray = MAXRAYS;
sparx-task-26ray.c:		glb.nray_tot += pp->nray;
sparx-task-26ray.c:		Mem_MEMCPY(pp->pops[0], pp->pops[zone_tid], NLEV);
sparx-task-26ray.c:				MPI_Send(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				MPI_Send(pp->tau, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				MPI_Send(&pp->ds, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				MPI_Send(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				//MPI_Send(&pp->nray, 1, MPI_INT, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				//MPI_Send(&pp->diff, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				//MPI_Send(&pp->converged, 1, MPI_INT, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-26ray.c:				MPI_Recv(pp->pops[0], (int)NLEV, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				MPI_Recv(pp->tau, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				MPI_Recv(&pp->ds, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				MPI_Recv(pp->J_bar, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				//MPI_Recv(&pp->nray, 1, MPI_INT, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				//MPI_Recv(&pp->diff, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:				//MPI_Recv(&pp->converged, 1, MPI_INT, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-26ray.c:		MPI_Bcast(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		MPI_Bcast(pp->tau, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		MPI_Bcast(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		//MPI_Bcast(&pp->nray, 1, MPI_INT, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		//MPI_Bcast(&pp->diff, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		//MPI_Bcast(&pp->converged, 1, MPI_INT, 0, MPI_COMM_WORLD);
sparx-task-26ray.c:		Mem_MEMCPY(pp->pops[i], pp->pops[0], NLEV);
sparx-task-26ray.c:	Deb_ASSERT(pp->nray > 0); /* Just in case */
sparx-task-26ray.c:	/* Reset pp->ds */
sparx-task-26ray.c:	pp->ds = 0;
sparx-task-26ray.c:	Mem_BZERO2(tau, pp->nray * NRAD);
sparx-task-26ray.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-26ray.c:		vel = (PRAND() - 0.5) * 4.3 * pp->width + GeVec3_DotProd(&v_gas, &ray.d);
sparx-task-26ray.c:	pp->ds /= (double)pp->nray;
sparx-task-26ray.c:		if(pp->non_empty_leaf) {
sparx-task-26ray.c:			zone_pp->ds += t;
sparx-task-26ray.c:			vfac = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel, zp, 0) : 0.0;
sparx-task-26ray.c:				if(pp->has_tracer) {
sparx-task-26ray.c:				j_nu += pp->cont[i].j;
sparx-task-26ray.c:				k_nu += pp->cont[i].k;
sparx-task-26ray.c:			printf("%12lu %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e\n", (unsigned long)iter, t, vfac, pp->n_H2, pp->X_mol, pp->width, dtau_nu, tau[0]);
sparx-task-26ray.c:	Mem_BZERO2(pp->J_bar, NRAD);
sparx-task-26ray.c:	Mem_BZERO2(pp->tau, NRAD);
sparx-task-26ray.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-26ray.c:			j_nu += pp->cont[j].j;
sparx-task-26ray.c:			k_nu += pp->cont[j].k;
sparx-task-26ray.c:				pp->J_bar[j] += vfac0[i] * (INTENSITY(i, j) * exp(-dtau_nu) + S_nu * (1.0 - exp(-dtau_nu)));
sparx-task-26ray.c:				pp->tau[j] += vfac0[i] * (TAU(i, j) + dtau_nu);
sparx-task-26ray.c:			pp->J_bar[i] = pp->J_bar[i] * glb.I_norm[i] / vfac0_sum;
sparx-task-26ray.c:			pp->tau[i] /= vfac0_sum;
sparx-task-26ray.c:		(pp->cmat[(j) + NLEV * (i)])
sparx-task-26ray.c:				RMAT(up, up) -= (RAD(i)->A_ul + pp->J_bar[i] * RAD(i)->B_ul);
sparx-task-26ray.c:				RMAT(lo, lo) -= (pp->J_bar[i] * RAD(i)->B_lu);
sparx-task-26ray.c:				RMAT(up, lo) += (pp->J_bar[i] * RAD(i)->B_lu);
sparx-task-26ray.c:				RMAT(lo, up) += (RAD(i)->A_ul + pp->J_bar[i] * RAD(i)->B_ul);
sparx-task-26ray.c:			Num_QRDecompSolve(rmat, NLEV + 1, NLEV, rhs, pp->pops[tid]);
sparx-task-26ray.c:				if(pp->pops[tid][i] < 0)
sparx-task-26ray.c:					pp->pops[tid][i] = 0.0;
sparx-task-26ray.c:				HIST(ihist, i) = pp->pops[tid][i];
sparx-task-26ray.c:			GeVec3_X(pp->zp->index, 0),
sparx-task-26ray.c:			GeVec3_X(pp->zp->index, 1),
sparx-task-26ray.c:			GeVec3_X(pp->zp->index, 2),
sparx-task-26ray.c:	//free(pp->J_bar);
sparx-task-26ray.c:		pp->pops[tid][i]=mean;
sparx-task-amc2.c:		//if(((pp->n_H2 * pp->X_mol) > 0) && !zp->children) {
sparx-task-amc2.c:		if((pp->n_H2 > 0) && !zp->children) {
sparx-task-amc2.c:			pp->non_empty_leaf = 1;
sparx-task-amc2.c:			if(pp->X_mol > 0) {
sparx-task-amc2.c:				pp->has_tracer = 1;
sparx-task-amc2.c:		if(pp->non_empty_leaf) {
sparx-task-amc2.c:			if(pp->has_tracer) {
sparx-task-amc2.c:				pp->nray = glb.nray;
sparx-task-amc2.c:				pp->sigma = SpPhys_CalcLineWidth(pp);
sparx-task-amc2.c:				for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-amc2.c:							pp->pops[k][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-amc2.c:							pp->pops[k][j] = (j == 0) ? 1.0 : 0.0;
sparx-task-amc2.c:			if(pp->T_d > 0) {
sparx-task-amc2.c:			if(pp->T_ff > 0) {
sparx-task-amc2.c:		ds0 = Mem_CALLOC(pp->nray, ds0);
sparx-task-amc2.c:		vfac0 = Mem_CALLOC(pp->nray, vfac0);
sparx-task-amc2.c:		intensity = Mem_CALLOC(pp->nray * NRAD, intensity);
sparx-task-amc2.c:		tau = Mem_CALLOC(pp->nray * NRAD, tau);
sparx-task-amc2.c:				for(i = 0; i < pp->nray; i++) {
sparx-task-amc2.c:					vel = (XI() - 0.5) * 4.3 * pp->sigma;
sparx-task-amc2.c:					vfac0[i] = Num_GaussNormal(vel, pp->sigma);
sparx-task-amc2.c:				HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc2.c:				pp->nray *= 4;
sparx-task-amc2.c:				if(pp->nray > MAXRAYS) {
sparx-task-amc2.c:					pp->nray = MAXRAYS;
sparx-task-amc2.c:		glb.nray_tot += pp->nray;
sparx-task-amc2.c:		Mem_MEMCPY(pp->pops[0], pp->pops[zone_tid], NLEV);
sparx-task-amc2.c:			MPI_Send(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc2.c:			MPI_Send(pp->tau, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc2.c:			MPI_Send(&pp->ds, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc2.c:			MPI_Recv(pp->pops[0], (int)NLEV, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc2.c:			MPI_Recv(pp->tau, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc2.c:			MPI_Recv(&pp->ds, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc2.c:	MPI_Bcast(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc2.c:	MPI_Bcast(pp->tau, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc2.c:		Mem_MEMCPY(pp->pops[i], pp->pops[0], NLEV);
sparx-task-amc2.c:	assert(pp->nray > 0); /* Just in case */
sparx-task-amc2.c:	/* Reset pp->ds */
sparx-task-amc2.c:	pp->ds = 0;
sparx-task-amc2.c:	Mem_BZERO2(tau, pp->nray * NRAD);
sparx-task-amc2.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc2.c:		vel = (PRAND() - 0.5) * 4.3 * pp->sigma + GeVec3_DotProd(&v_gas, &ray.d);
sparx-task-amc2.c:	pp->ds /= (double)pp->nray;
sparx-task-amc2.c:		if(pp->non_empty_leaf) {
sparx-task-amc2.c:			zone_pp->ds += t;
sparx-task-amc2.c:			vfac = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel, zp, 0) : 0;
sparx-task-amc2.c:					if(pp->has_tracer) {
sparx-task-amc2.c:					j_nu += pp->cont[i].j;
sparx-task-amc2.c:					k_nu += pp->cont[i].k;
sparx-task-amc2.c:			printf("%12lu %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e\n", (unsigned long)iter, t, vfac, pp->n_H2, pp->X_mol, pp->sigma, dtau_nu, tau[0]);
sparx-task-amc2.c:		if(pp->non_empty_leaf) {
sparx-task-amc2.c:			zone_pp->ds += t;
sparx-task-amc2.c:			if(pp->has_tracer) {
sparx-task-amc2.c:					j_nu += pp->cont[i].j;
sparx-task-amc2.c:					k_nu += pp->cont[i].k;
sparx-task-amc2.c:			printf("%12lu %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e\n", (unsigned long)iter, t, vfac, pp->n_H2, pp->X_mol, pp->sigma, dtau_nu, tau[0]);
sparx-task-amc2.c:	Mem_BZERO2(pp->tau, NRAD);
sparx-task-amc2.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc2.c:				pp->tau[j] += vfac0[i] * (TAU(i, j) + dtau_nu);
sparx-task-amc2.c:			pp->tau[i] /= vfac0_sum;
sparx-task-amc2.c:		(pp->cmat[(j) + NLEV * (i)])
sparx-task-amc2.c:			Num_QRDecompSolve(rmat, NLEV + 1, NLEV, rhs, pp->pops[tid]);
sparx-task-amc2.c:				if(pp->pops[tid][i] < 0)
sparx-task-amc2.c:					pp->pops[tid][i] = 0.0;
sparx-task-amc2.c:				HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc2.c:			GeVec3_X(pp->zp->index, 0),
sparx-task-amc2.c:			GeVec3_X(pp->zp->index, 1),
sparx-task-amc2.c:			GeVec3_X(pp->zp->index, 2),
sparx-task-amc.c:		if((pp->n_H2 > 1e-200) && !zp->children) {
sparx-task-amc.c:			pp->non_empty_leaf = 1;
sparx-task-amc.c:			if(pp->X_mol > 0) {
sparx-task-amc.c:				pp->has_tracer = 1;
sparx-task-amc.c:				pp->has_tracer = 0;	
sparx-task-amc.c:			pp->non_empty_leaf = 0;
sparx-task-amc.c:			pp->has_tracer = 0;
sparx-task-amc.c:		if(pp->non_empty_leaf) {
sparx-task-amc.c:			if(pp->has_tracer) {
sparx-task-amc.c:				pp->nray = glb.nray;
sparx-task-amc.c:				pp->diff = 0.0;
sparx-task-amc.c:				pp->width = SpPhys_CalcLineWidth(pp);
sparx-task-amc.c:					for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-amc.c:								pp->pops[k][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-amc.c:								pp->pops[k][j] = (j == 0) ? 1.0 : 0.0;
sparx-task-amc.c:			if(pp->T_d > 0) {
sparx-task-amc.c:			if(pp->T_ff > 0) {
sparx-task-amc.c:						temp_nray_tot+=pp->nray;
sparx-task-amc.c:						temp_nray_tot=temp_nray_tot+pp->nray;
sparx-task-amc.c:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[0]);}
sparx-task-amc.c:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[3]);}
sparx-task-amc.c:						if(pp->non_empty_leaf){
sparx-task-amc.c:							pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],\
sparx-task-amc.c:							pp->pops[0][6],pp->pops[0][7],pp->pops[0][8]);
sparx-task-amc.c:					 	fprintf(fp,"%11.4e\n",pp->diff);
sparx-task-amc.c:					 	fprintf(fp,"%8zu\n",pp->nray);
sparx-task-amc.c:					 	fprintf(fp,"%1zu\n",pp->converged );
sparx-task-amc.c:						                                 zp->voxel.cen.x[2],pp->nray);
sparx-task-amc.c:		 	fprintf(fp,"%11.4e\n",pp->n_H2);
sparx-task-amc.c:		 	fprintf(fp,"%11.4e %11.4e %11.4e\n",pp->v_cen.x[0],pp->v_cen.x[1],pp->v_cen.x[2]);
sparx-task-amc.c:				tempR,pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],\
sparx-task-amc.c:				      pp->pops[0][6],pp->pops[0][7],pp->pops[0][8]);
sparx-task-amc.c:			     	popsold[i]=pp->pops[tid][i];
sparx-task-amc.c:		ds0 = Mem_CALLOC(pp->nray, ds0);
sparx-task-amc.c:		vfac0 = Mem_CALLOC(pp->nray, vfac0);
sparx-task-amc.c:		intensity = Mem_CALLOC(pp->nray * NRAD, intensity);
sparx-task-amc.c:		tau = Mem_CALLOC(pp->nray * NRAD, tau);
sparx-task-amc.c:				for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c:					vel = (XI() - 0.5) * 4.3 * pp->width;
sparx-task-amc.c:					vfac0[i] = Num_GaussNormal(vel, pp->width);
sparx-task-amc.c:					HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc.c:			pp->diff=diff;
sparx-task-amc.c:			     	if(pp->pops[tid][i]>glb.minpop){
sparx-task-amc.c:					temp = fabs( pp->pops[tid][i] - popsold[i] ) / pp->pops[tid][i];
sparx-task-amc.c:				pp->nray *= 4;
sparx-task-amc.c:			//pp->nray += (size_t)(0.01 * glb.nray);
sparx-task-amc.c:			pp->nray *= 4;
sparx-task-amc.c:		if(pp->nray > MAXRAYS) {
sparx-task-amc.c:			pp->nray = MAXRAYS;
sparx-task-amc.c:		glb.nray_tot += pp->nray;
sparx-task-amc.c:		Mem_MEMCPY(pp->pops[0], pp->pops[zone_tid], NLEV);
sparx-task-amc.c:				MPI_Send(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				MPI_Send(pp->tau, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				MPI_Send(&pp->ds, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				//MPI_Send(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				MPI_Send(&pp->nray, sizeof(size_t), MPI_CHAR, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				//MPI_Send(&pp->diff, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c:				MPI_Recv(pp->pops[0], (int)NLEV, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:				MPI_Recv(pp->tau, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:				MPI_Recv(&pp->ds, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:				//MPI_Recv(pp->J_bar, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:				MPI_Recv(&pp->nray, sizeof(size_t), MPI_CHAR, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:				//MPI_Recv(&pp->diff, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c:		MPI_Bcast(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c:		MPI_Bcast(pp->tau, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c:		//MPI_Bcast(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c:		MPI_Bcast(&pp->nray, sizeof(size_t), MPI_CHAR, 0, MPI_COMM_WORLD);
sparx-task-amc.c:		//MPI_Bcast(&pp->diff, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c:		Mem_MEMCPY(pp->pops[i], pp->pops[0], NLEV);
sparx-task-amc.c:	Deb_ASSERT(pp->nray > 0); /* Just in case */
sparx-task-amc.c:	/* Reset pp->ds */
sparx-task-amc.c:	pp->ds = 0;
sparx-task-amc.c:	Mem_BZERO2(tau, pp->nray * NRAD);
sparx-task-amc.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c:		vel = (PRAND() - 0.5) * 4.3 * pp->width + GeVec3_DotProd(&v_gas, &ray.d);
sparx-task-amc.c:	pp->ds /= (double)pp->nray;
sparx-task-amc.c:		if(pp->non_empty_leaf) {
sparx-task-amc.c:			zone_pp->ds += t;
sparx-task-amc.c:			vfac = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel, zp, 0) : 0.0;
sparx-task-amc.c:				if(pp->has_tracer) {					
sparx-task-amc.c:									vfac2 = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel-RELVEL(i,j), zp, 0) : 0.0;
sparx-task-amc.c:				j_nu += pp->cont[i].j;
sparx-task-amc.c:				k_nu += pp->cont[i].k;
sparx-task-amc.c:			printf("%12lu %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e\n", (unsigned long)iter, t, vfac, pp->n_H2, pp->X_mol, pp->width, dtau_nu, tau[0]);
sparx-task-amc.c:	//Mem_BZERO2(pp->J_bar, NRAD);
sparx-task-amc.c:	Mem_BZERO2(pp->tau, NRAD);
sparx-task-amc.c:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c:			j_nu += pp->cont[j].j;
sparx-task-amc.c:			k_nu += pp->cont[j].k;
sparx-task-amc.c:				//pp->J_bar[j] += vfac0[i] * (INTENSITY(i, j) * exp(-dtau_nu) + S_nu * (1.0 - exp(-dtau_nu)));
sparx-task-amc.c:				pp->tau[j] += vfac0[i] * (TAU(i, j) + dtau_nu);
sparx-task-amc.c:			//pp->J_bar[i] = pp->J_bar[i] * glb.I_norm[i] / vfac0_sum;
sparx-task-amc.c:			pp->tau[i] /= vfac0_sum;
sparx-task-amc.c:		(pp->cmat[(j) + NLEV * (i)])
sparx-task-amc.c:			Num_QRDecompSolve(rmat, NLEV + 1, NLEV, rhs, pp->pops[tid]);
sparx-task-amc.c:				if(pp->pops[tid][i] < 0)
sparx-task-amc.c:					pp->pops[tid][i] = 0.0;
sparx-task-amc.c:				HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc.c:			GeVec3_X(pp->zp->index, 0),
sparx-task-amc.c:			GeVec3_X(pp->zp->index, 1),
sparx-task-amc.c:			GeVec3_X(pp->zp->index, 2),
sparx-task-amc.c:		pp->pops[tid][i]=mean;
sparx-task-amc.c~:		if((pp->n_H2 > 1e-200) && !zp->children) {
sparx-task-amc.c~:			pp->non_empty_leaf = 1;
sparx-task-amc.c~:			if(pp->X_mol > 0) {
sparx-task-amc.c~:				pp->has_tracer = 1;
sparx-task-amc.c~:				pp->has_tracer = 0;	
sparx-task-amc.c~:			pp->non_empty_leaf = 0;
sparx-task-amc.c~:			pp->has_tracer = 0;
sparx-task-amc.c~:		if(pp->non_empty_leaf) {
sparx-task-amc.c~:			if(pp->has_tracer) {
sparx-task-amc.c~:				pp->nray = glb.nray;
sparx-task-amc.c~:				pp->diff = 0.0;
sparx-task-amc.c~:				pp->width = SpPhys_CalcLineWidth(pp);
sparx-task-amc.c~:					for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-amc.c~:								pp->pops[k][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-amc.c~:								pp->pops[k][j] = (j == 0) ? 1.0 : 0.0;
sparx-task-amc.c~:			if(pp->T_d > 0) {
sparx-task-amc.c~:			if(pp->T_ff > 0) {
sparx-task-amc.c~:						temp_nray_tot+=pp->nray;
sparx-task-amc.c~:						temp_nray_tot=temp_nray_tot+pp->nray;
sparx-task-amc.c~:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[0]);}
sparx-task-amc.c~:						if(pp->non_empty_leaf){fprintf(fp,"%11.4e\n",pp->J_bar[3]);}
sparx-task-amc.c~:						if(pp->non_empty_leaf){
sparx-task-amc.c~:							pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],\
sparx-task-amc.c~:							pp->pops[0][6],pp->pops[0][7],pp->pops[0][8]);
sparx-task-amc.c~:					 	fprintf(fp,"%11.4e\n",pp->diff);
sparx-task-amc.c~:					 	fprintf(fp,"%8zu\n",pp->nray);
sparx-task-amc.c~:					 	fprintf(fp,"%1zu\n",pp->converged );
sparx-task-amc.c~:						                                 zp->voxel.cen.x[2],pp->nray);
sparx-task-amc.c~:		 	fprintf(fp,"%11.4e\n",pp->n_H2);
sparx-task-amc.c~:		 	fprintf(fp,"%11.4e %11.4e %11.4e\n",pp->v_cen.x[0],pp->v_cen.x[1],pp->v_cen.x[2]);
sparx-task-amc.c~:				tempR,pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],\
sparx-task-amc.c~:				      pp->pops[0][6],pp->pops[0][7],pp->pops[0][8]);
sparx-task-amc.c~:			     	popsold[i]=pp->pops[tid][i];
sparx-task-amc.c~:		ds0 = Mem_CALLOC(pp->nray, ds0);
sparx-task-amc.c~:		vfac0 = Mem_CALLOC(pp->nray, vfac0);
sparx-task-amc.c~:		intensity = Mem_CALLOC(pp->nray * NRAD, intensity);
sparx-task-amc.c~:		tau = Mem_CALLOC(pp->nray * NRAD, tau);
sparx-task-amc.c~:				for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c~:					vel = (XI() - 0.5) * 4.3 * pp->width;
sparx-task-amc.c~:					vfac0[i] = Num_GaussNormal(vel, pp->width);
sparx-task-amc.c~:					HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc.c~:			pp->diff=diff;
sparx-task-amc.c~:			     	if(pp->pops[tid][i]>glb.minpop){
sparx-task-amc.c~:					temp = fabs( pp->pops[tid][i] - popsold[i] ) / pp->pops[tid][i];
sparx-task-amc.c~:				pp->nray *= 4;
sparx-task-amc.c~:			//pp->nray += (size_t)(0.01 * glb.nray);
sparx-task-amc.c~:			pp->nray *= 4;
sparx-task-amc.c~:		if(pp->nray > MAXRAYS) {
sparx-task-amc.c~:			pp->nray = MAXRAYS;
sparx-task-amc.c~:		glb.nray_tot += pp->nray;
sparx-task-amc.c~:		Mem_MEMCPY(pp->pops[0], pp->pops[zone_tid], NLEV);
sparx-task-amc.c~:				MPI_Send(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				MPI_Send(pp->tau, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				MPI_Send(&pp->ds, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				//MPI_Send(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				MPI_Send(&pp->nray, sizeof(size_t), MPI_CHAR, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				//MPI_Send(&pp->diff, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-task-amc.c~:				MPI_Recv(pp->pops[0], (int)NLEV, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:				MPI_Recv(pp->tau, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:				MPI_Recv(&pp->ds, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:				//MPI_Recv(pp->J_bar, (int)NRAD, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:				MPI_Recv(&pp->nray, sizeof(size_t), MPI_CHAR, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:				//MPI_Recv(&pp->diff, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-task-amc.c~:		MPI_Bcast(pp->pops[0], (int)NLEV, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c~:		MPI_Bcast(pp->tau, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c~:		//MPI_Bcast(pp->J_bar, (int)NRAD, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c~:		MPI_Bcast(&pp->nray, sizeof(size_t), MPI_CHAR, 0, MPI_COMM_WORLD);
sparx-task-amc.c~:		//MPI_Bcast(&pp->diff, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
sparx-task-amc.c~:		Mem_MEMCPY(pp->pops[i], pp->pops[0], NLEV);
sparx-task-amc.c~:	Deb_ASSERT(pp->nray > 0); /* Just in case */
sparx-task-amc.c~:	/* Reset pp->ds */
sparx-task-amc.c~:	pp->ds = 0;
sparx-task-amc.c~:	Mem_BZERO2(tau, pp->nray * NRAD);
sparx-task-amc.c~:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c~:		vel = (PRAND() - 0.5) * 4.3 * pp->width + GeVec3_DotProd(&v_gas, &ray.d);
sparx-task-amc.c~:	pp->ds /= (double)pp->nray;
sparx-task-amc.c~:		if(pp->non_empty_leaf) {
sparx-task-amc.c~:			zone_pp->ds += t;
sparx-task-amc.c~:			vfac = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel, zp, 0) : 0.0;
sparx-task-amc.c~:				if(pp->has_tracer) {					
sparx-task-amc.c~:									vfac2 = pp->has_tracer ? SpPhys_GetVfac(ray, t, vel-RELVEL(i,j), zp, 0) : 0.0;
sparx-task-amc.c~:				j_nu += pp->cont[i].j;
sparx-task-amc.c~:				k_nu += pp->cont[i].k;
sparx-task-amc.c~:			printf("%12lu %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e %12.4e\n", (unsigned long)iter, t, vfac, pp->n_H2, pp->X_mol, pp->width, dtau_nu, tau[0]);
sparx-task-amc.c~:	//Mem_BZERO2(pp->J_bar, NRAD);
sparx-task-amc.c~:	Mem_BZERO2(pp->tau, NRAD);
sparx-task-amc.c~:	for(i = 0; i < pp->nray; i++) {
sparx-task-amc.c~:			j_nu += pp->cont[j].j;
sparx-task-amc.c~:			k_nu += pp->cont[j].k;
sparx-task-amc.c~:				//pp->J_bar[j] += vfac0[i] * (INTENSITY(i, j) * exp(-dtau_nu) + S_nu * (1.0 - exp(-dtau_nu)));
sparx-task-amc.c~:				pp->tau[j] += vfac0[i] * (TAU(i, j) + dtau_nu);
sparx-task-amc.c~:			//pp->J_bar[i] = pp->J_bar[i] * glb.I_norm[i] / vfac0_sum;
sparx-task-amc.c~:			pp->tau[i] /= vfac0_sum;
sparx-task-amc.c~:		(pp->cmat[(j) + NLEV * (i)])
sparx-task-amc.c~:			Num_QRDecompSolve(rmat, NLEV + 1, NLEV, rhs, pp->pops[tid]);
sparx-task-amc.c~:				if(pp->pops[tid][i] < 0)
sparx-task-amc.c~:					pp->pops[tid][i] = 0.0;
sparx-task-amc.c~:				HIST(ihist, i) = pp->pops[tid][i];
sparx-task-amc.c~:			GeVec3_X(pp->zp->index, 0),
sparx-task-amc.c~:			GeVec3_X(pp->zp->index, 1),
sparx-task-amc.c~:			GeVec3_X(pp->zp->index, 2),
sparx-task-amc.c~:		pp->pops[tid][i]=mean;
sparx-task-asciigrid.c:			pp->n_H2 = Sp_PYDBL(Sp_PYLST(glb.nh2, i)); /* m^-3 */
sparx-task-asciigrid.c:			pp->X_mol = Sp_PYDBL(Sp_PYLST(glb.xmol, i)); /* fraction */
sparx-task-asciigrid.c:			pp->X_pH2 = Sp_PYDBL(Sp_PYLST(glb.x_pH2, i)); /* fraction */
sparx-task-asciigrid.c:			pp->X_oH2 = Sp_PYDBL(Sp_PYLST(glb.x_oH2, i)); /* fraction */
sparx-task-asciigrid.c:			pp->X_e = Sp_PYDBL(Sp_PYLST(glb.x_e, i)); /* fraction */
sparx-task-asciigrid.c:			pp->X_H = Sp_PYDBL(Sp_PYLST(glb.x_H, i)); /* fraction */
sparx-task-asciigrid.c:			pp->X_He = Sp_PYDBL(Sp_PYLST(glb.x_He, i)); /* fraction */
sparx-task-asciigrid.c:			pp->T_k = Sp_PYDBL(Sp_PYLST(glb.tk, i)); /* K */
sparx-task-asciigrid.c:			pp->V_t = Sp_PYDBL(Sp_PYLST(glb.vt, i)); /* m/s */
sparx-task-asciigrid.c:			GeVec3_X(pp->v_cen, 0) = Sp_PYDBL(Sp_PYLST(glb.vr, i)); /* m/s */
sparx-task-example.c:				pp->n_H2 = nh[i] * percc; /* cm^-3 -> m^-3 */
sparx-task-example.c:				pp->X_mol = (nh[i] > 0 ? nm[i] / nh[i] : 0.0); /* fraction */
sparx-task-example.c:				pp->T_k = tk[i]; /* K */
sparx-task-example.c:				pp->V_t = db[i] * km; /* km/s -> m/s */
sparx-task-example.c:				GeVec3_X(pp->v_cen, 0) = vr[i] * km; /* km/s -> m/s */
sparx-task-example.c:						pp->pops[0][j] = lp[i][j]; /* fraction */
sparx-task-example.c:						pp->n_H2 = pow(10.0, logdum) * percc; /* cm^-3 -> m^-3 */
sparx-task-example.c:						pp->X_mol = (nh[i] > 0 ? logdum / nh[i] : 0.0); /* fraction */
sparx-task-example.c:						pp->T_k = pow(10.0, logdum); /* K */
sparx-task-example.c:						pp->V_t = db[i] * km; /* km/s -> m/s */
sparx-task-example.c:						pp->v_cen = GeVec3_Scale(&pos, vr[i] * km); /* km/s -> m/s */
sparx-task-example.c:								pp->pops[0][j] = pow(10.0, logdum); /* fraction */
sparx-task-genmodel.c:		pp->n_H2 = n_H2_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c:		pp->T_k = T_k_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c:		pp->X_mol = X_mol_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c:				pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
sparx-task-genmodel.c:		pp->v_cen = v_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c~:		pp->n_H2 = n_H2_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c~:		pp->T_k = T_k_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c~:		pp->X_mol = X_mol_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-genmodel.c~:				pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
sparx-task-genmodel.c~:		pp->v_cen = v_Profile(&root->voxel.cen, &zp->voxel.cen);
sparx-task-powerlaw.c:				GeVec3_X(pp->v_cen, 0) = glb.vrad * GeVec3_X(zp->voxel.cen, 0);
sparx-task-powerlaw.c:					pp->v_cen = GeVec3_Scale(&pos, velo);
sparx-task-powerlaw.c:				pp->T_k = glb.tkin * pow(radius / glb.r0, glb.a_tkin); /* K */
sparx-task-powerlaw.c:				pp->n_H2 = glb.ngas; /* m^-3 */
sparx-task-powerlaw.c:				pp->X_mol = glb.xmol; /* fraction */
sparx-task-powerlaw.c:				pp->T_k = glb.tkin * pow(radius / glb.r0, glb.a_tkin); /* K */
sparx-task-powerlaw.c:				pp->n_H2 = glb.ngas * pow(radius / glb.r0, glb.a_ngas); /* m^-3 */
sparx-task-powerlaw.c:				pp->X_mol = glb.xmol; /* fraction */
sparx-task-powerlaw.c:				for(i = 0; i < pp->mol->nlev; i++) {
sparx-task-powerlaw.c:					pp->pops[0][i] = SpPhys_BoltzPops(glb.model.parms.mol, i, pp->T_k);
sparx-task-pygrid.c:					pp->n_H2 = ARRAY(n_H2, i, j, k);
sparx-task-pygrid.c:					pp->X_mol = ARRAY(X_mol, i, j, k);
sparx-task-pygrid.c:					pp->X_pH2 = ARRAY(X_pH2, i, j, k);
sparx-task-pygrid.c:					pp->X_oH2 = ARRAY(X_oH2, i, j, k);
sparx-task-pygrid.c:					pp->X_e = ARRAY(X_e, i, j, k);
sparx-task-pygrid.c:					pp->X_H = ARRAY(X_H, i, j, k);
sparx-task-pygrid.c:					pp->X_He = ARRAY(X_He, i, j, k);
sparx-task-pygrid.c:					pp->T_k = ARRAY(T_k, i, j, k);
sparx-task-pygrid.c:					pp->T_d = ARRAY(T_d, i, j, k);
sparx-task-pygrid.c:					pp->T_ff = ARRAY(T_ff, i, j, k);
sparx-task-pygrid.c:					pp->T_bb = ARRAY(T_bb, i, j, k);
sparx-task-pygrid.c:					pp->V_t = ARRAY(V_t, i, j, k);
sparx-task-pygrid.c:					GeVec3_X(pp->v_cen, 0) = ARRAY(V_i, i, j, k); /* m/s */
sparx-task-pygrid.c:					GeVec3_X(pp->v_cen, 1) = ARRAY(V_j, i, j, k); /* m/s */
sparx-task-pygrid.c:					GeVec3_X(pp->v_cen, 2) = ARRAY(V_k, i, j, k); /* m/s */
sparx-task-pygrid.c:					strncpy(pp->kapp_d, ARRAY_STR(kapp_d, i, j, k), ZoneH5_KAPPLEN);
sparx-task-pygrid.c:					strncpy(pp->kapp_ff, ARRAY_STR(kapp_ff, i, j, k), ZoneH5_KAPPLEN);
sparx-task-pygrid.c:					if(pp->mol) {
sparx-task-pygrid.c:						for(l = 0; l < pp->mol->nlev; l++) {
sparx-task-pygrid.c:								pp->pops[m][l] = SpPhys_BoltzPops(pp->mol, l, pp->T_k);
sparx-task-telsim.c:		if((pp->n_H2 > 1e-200) && !zp->children) {
sparx-task-telsim.c:			pp->non_empty_leaf = 1;
sparx-task-telsim.c:			if(pp->X_mol > 0) {
sparx-task-telsim.c:				pp->has_tracer = 1;
sparx-task-telsim.c: 				fprintf(fp,"%g %g %g %g %g %g %g %g %g %g %g\n",radius,pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],pp->pops[0][6],pp->pops[0][7],pp->pops[0][8],pp->pops[0][9]);
sparx-task-telsim.c:				pp->has_tracer = 0;
sparx-task-telsim.c:			pp->non_empty_leaf = 0;
sparx-task-telsim.c:			pp->has_tracer = 0;
sparx-task-telsim.c:					pp->mol = glb.model.parms.mol;
sparx-task-telsim.c:printf("zone_id=%d pp=%d pops=%d nlev=%d\n",zone_id,pp,pp->pops[k],pp->mol->nlev);
sparx-task-telsim.c:						pp->pops[k] = Mem_CALLOC(pp->mol->nlev, pp->pops[k]);
sparx-task-telsim.c:					for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-telsim.c:						pp->pops[0][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-telsim.c:							pp->pops[k][j] = pp->pops[0][j];
sparx-task-telsim.c:					pp->width = SpPhys_CalcLineWidth(pp);
sparx-task-telsim.c:				if(pp->T_d > 0) {
sparx-task-telsim.c:				if(pp->T_ff > 0) {
sparx-task-telsim.c:				if(pp->T_bb > 0) {
sparx-task-telsim.c:					SpPhys_SetContinuumIntens_bb(pp, glb.cont, pp->T_bb, glb.I_norm);
sparx-task-telsim.c:					Deb_PRINT("T_bb=%g, F_nu=%g\n", pp->T_bb, pp->cont[0].I_bb);
sparx-task-telsim.c:			if(pp->non_empty_leaf) {
sparx-task-telsim.c:					if(!glb.cont && pp->has_tracer) {
sparx-task-telsim.c:											vfac2 = pp->has_tracer ? SpPhys_GetVfac(&ray, t, dv-RELVEL(i,j), zp, 0) : 0.0;
sparx-task-telsim.c:						j_nu += pp->cont[glb.line].j;
sparx-task-telsim.c:					k_nu += pp->cont[glb.line].k;
sparx-task-telsim.c:					//I_nu[iv] += (S_nu * (1.0 - exp(-dtau_nu)) + pp->cont[glb.line].I_bb) * exp(-tau_nu[iv]);
sparx-task-telsim.c:				Deb_PRINT("dnesity=%g\n",pp->n_H2);
sparx-task-telsim.c:				if(pp->non_empty_leaf) Deb_PRINT("non empty leaf\n");
sparx-task-telsim.c:			if(pp->non_empty_leaf) {
sparx-task-telsim.c:// 				I_nu[0] += pp->n_H2 * pp->X_mol * t * Sp_LENFAC * zproduct;
sparx-task-telsim.c:				I_nu[0] += pp->n_H2 * pp->X_mol * t * Sp_LENFAC;
sparx-task-telsim.c:				if(pp->X_mol == 0.0){
sparx-task-telsim.c:					trans = pp->mol->rad[glb.line];
sparx-task-telsim.c:					n_u = pp->pops[0][up];
sparx-task-telsim.c:					n_l = pp->pops[0][lo];
sparx-task-telsim.c:					E_u = pp->mol->lev[up]->E;
sparx-task-telsim.c:					E_l = pp->mol->lev[lo]->E;
sparx-task-telsim.c:					g_u = pp->mol->lev[up]->g;
sparx-task-telsim.c:					g_l = pp->mol->lev[lo]->g;
sparx-task-telsim.c:					fprintf(fp2,"%12.6e\n",Tex/(pp->T_k));
sparx-task-telsim.c:				fprintf(fp2,"%12.6e\n",pp->T_k);
sparx-task-telsim.c:				fprintf(fp2,"%12.6e\n",pp->n_H2);
sparx-task-telsim.c:				if(pp->X_mol == 0.0){
sparx-task-telsim.c:					trans = pp->mol->rad[glb.line];
sparx-task-telsim.c:					n_u = pp->pops[0][up];
sparx-task-telsim.c:					n_l = pp->pops[0][lo];
sparx-task-telsim.c:					E_u = pp->mol->lev[up]->E;
sparx-task-telsim.c:					E_l = pp->mol->lev[lo]->E;
sparx-task-telsim.c:					g_u = pp->mol->lev[up]->g;
sparx-task-telsim.c:					g_l = pp->mol->lev[lo]->g;
sparx-task-telsim.c:					fprintf(fp2,"%12.6e\n", Tex * pp->n_H2 * pp->X_mol);
sparx-task-telsim.c~:		if((pp->n_H2 > 1e-200) && !zp->children) {
sparx-task-telsim.c~:			pp->non_empty_leaf = 1;
sparx-task-telsim.c~:			if(pp->X_mol > 0) {
sparx-task-telsim.c~:				pp->has_tracer = 1;
sparx-task-telsim.c~: 				fprintf(fp,"%g %g %g %g %g %g %g %g %g %g %g\n",radius,pp->pops[0][0],pp->pops[0][1],pp->pops[0][2],pp->pops[0][3],pp->pops[0][4],pp->pops[0][5],pp->pops[0][6],pp->pops[0][7],pp->pops[0][8],pp->pops[0][9]);
sparx-task-telsim.c~:				pp->has_tracer = 0;
sparx-task-telsim.c~:			pp->non_empty_leaf = 0;
sparx-task-telsim.c~:			pp->has_tracer = 0;
sparx-task-telsim.c~:					pp->mol = glb.model.parms.mol;
sparx-task-telsim.c~:printf("zone_id=%d pp=%d pops=%d nlev=%d\n",zone_id,pp,pp->pops[0],pp->mol->nlev);
sparx-task-telsim.c~:						pp->pops[k] = Mem_CALLOC(pp->mol->nlev, pp->pops[k]);
sparx-task-telsim.c~:					for(j = 0; j < pp->mol->nlev; j++) {
sparx-task-telsim.c~:						pp->pops[0][j] = SpPhys_BoltzPops(pp->mol, j, pp->T_k);
sparx-task-telsim.c~:							pp->pops[k][j] = pp->pops[0][j];
sparx-task-telsim.c~:					pp->width = SpPhys_CalcLineWidth(pp);
sparx-task-telsim.c~:				if(pp->T_d > 0) {
sparx-task-telsim.c~:				if(pp->T_ff > 0) {
sparx-task-telsim.c~:				if(pp->T_bb > 0) {
sparx-task-telsim.c~:					SpPhys_SetContinuumIntens_bb(pp, glb.cont, pp->T_bb, glb.I_norm);
sparx-task-telsim.c~:					Deb_PRINT("T_bb=%g, F_nu=%g\n", pp->T_bb, pp->cont[0].I_bb);
sparx-task-telsim.c~:			if(pp->non_empty_leaf) {
sparx-task-telsim.c~:					if(!glb.cont && pp->has_tracer) {
sparx-task-telsim.c~:											vfac2 = pp->has_tracer ? SpPhys_GetVfac(&ray, t, dv-RELVEL(i,j), zp, 0) : 0.0;
sparx-task-telsim.c~:						j_nu += pp->cont[glb.line].j;
sparx-task-telsim.c~:					k_nu += pp->cont[glb.line].k;
sparx-task-telsim.c~:					//I_nu[iv] += (S_nu * (1.0 - exp(-dtau_nu)) + pp->cont[glb.line].I_bb) * exp(-tau_nu[iv]);
sparx-task-telsim.c~:				Deb_PRINT("dnesity=%g\n",pp->n_H2);
sparx-task-telsim.c~:				if(pp->non_empty_leaf) Deb_PRINT("non empty leaf\n");
sparx-task-telsim.c~:			if(pp->non_empty_leaf) {
sparx-task-telsim.c~:// 				I_nu[0] += pp->n_H2 * pp->X_mol * t * Sp_LENFAC * zproduct;
sparx-task-telsim.c~:				I_nu[0] += pp->n_H2 * pp->X_mol * t * Sp_LENFAC;
sparx-task-telsim.c~:				if(pp->X_mol == 0.0){
sparx-task-telsim.c~:					trans = pp->mol->rad[glb.line];
sparx-task-telsim.c~:					n_u = pp->pops[0][up];
sparx-task-telsim.c~:					n_l = pp->pops[0][lo];
sparx-task-telsim.c~:					E_u = pp->mol->lev[up]->E;
sparx-task-telsim.c~:					E_l = pp->mol->lev[lo]->E;
sparx-task-telsim.c~:					g_u = pp->mol->lev[up]->g;
sparx-task-telsim.c~:					g_l = pp->mol->lev[lo]->g;
sparx-task-telsim.c~:					fprintf(fp2,"%12.6e\n",Tex/(pp->T_k));
sparx-task-telsim.c~:				fprintf(fp2,"%12.6e\n",pp->T_k);
sparx-task-telsim.c~:				fprintf(fp2,"%12.6e\n",pp->n_H2);
sparx-task-telsim.c~:				if(pp->X_mol == 0.0){
sparx-task-telsim.c~:					trans = pp->mol->rad[glb.line];
sparx-task-telsim.c~:					n_u = pp->pops[0][up];
sparx-task-telsim.c~:					n_l = pp->pops[0][lo];
sparx-task-telsim.c~:					E_u = pp->mol->lev[up]->E;
sparx-task-telsim.c~:					E_l = pp->mol->lev[lo]->E;
sparx-task-telsim.c~:					g_u = pp->mol->lev[up]->g;
sparx-task-telsim.c~:					g_l = pp->mol->lev[lo]->g;
sparx-task-telsim.c~:					fprintf(fp2,"%12.6e\n", Tex * pp->n_H2 * pp->X_mol);
sparx-task-uniform.c:				GeVec3_X(pp->v_cen, 0) = glb.vrad * GeVec3_X(zp->voxel.cen, 0);
sparx-task-uniform.c:					pp->v_cen = GeVec3_Scale(&pos, velo);
sparx-task-uniform.c:			pp->T_k = glb.tkin; /* K */
sparx-task-uniform.c:			pp->n_H2 = glb.ngas; /* m^-3 */
sparx-task-uniform.c:			pp->X_mol = glb.xmol; /* fraction */
sparx-task-uniform.c:				strncpy(pp->kapp_d, glb.dust->name, ZoneH5_KAPPLEN);
sparx-task-uniform.c:				for(i = 0; i < pp->mol->nlev; i++) {
sparx-task-uniform.c:					pp->pops[0][i] = SpPhys_BoltzPops(glb.model.parms.mol, i, pp->T_k);
sparx-task-w3oh.c:	pp->n_H2 = glb.nref * pow(GeVec3_X(zp->voxel.cen, 0) / glb.rref, glb.nidx); /* m^-3 */
sparx-task-w3oh.c:	pp->T_k = glb.tref * pow(GeVec3_X(zp->voxel.cen, 0) / glb.rref, glb.tidx); /* K */
sparx-task-w3oh.c:	GeVec3_X(pp->v_cen, 0) = glb.vref * pow(GeVec3_X(zp->voxel.cen, 0) / glb.rref, glb.vidx); /* m/s */
sparx-task-w3oh.c:	pp->X_mol = glb.xmol; /* fraction */
sparx-task-w3oh.c:	strncpy(pp->kapp_d, glb.kap->name, ZoneH5_KAPPLEN);
sparx-task-w3oh.c:		for(i = 0; i < pp->mol->nlev; i++) {
sparx-task-w3oh.c:			pp->pops[0][i] = SpPhys_BoltzPops(glb.model.parms.mol, i, pp->T_k);
sparx-task-w3oh.c:		pp->T_ff = glb.tcen;
sparx-task-w3oh.c:		snprintf(pp->kapp_ff, ZoneH5_KAPPLEN, "powerlaw,%10.3e,%10.3e,%10.3e", 
sparx-test.c:			pp->T_k = 40.0;
sparx-test.c:				pp->pops[0][i] = SpPhys_BoltzPops(model.parms.mol, i, pp->T_k);
sparx-test.c:			if(pp->n_H2 * pp->X_mol > DBL_EPSILON && !zp->children) {
sparx-test.c:				pp->T_k = 40.0; /* K */
sparx-test.c:				pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC; /* m^-3 */
sparx-test.c:				pp->X_mol = 1.0e-8;
sparx-test.c:				pp->width = 192.0;
sparx-test.c:					pp->pops[0][i] = SpPhys_BoltzPops(prm.mol, i, pp->T_k);
sparx-test.c:					GeVec3_X(pp->v_cen, 0) = -1000;
sparx-test.c:					GeVec3_X(pp->v_cen, 1) = 0;
sparx-test.c:					GeVec3_X(pp->v_cen, 2) = 0;
sparx-test.c:						GeVec3_X(pp->v_edge[i], 0) = -1000;
sparx-test.c:						GeVec3_X(pp->v_edge[i], 1) = 0;
sparx-test.c:						GeVec3_X(pp->v_edge[i], 2) = 0;
sparx-test.c~:			pp->T_k = 40.0;
sparx-test.c~:				pp->pops[0][i] = SpPhys_BoltzPops(model.parms.mol, i, pp->T_k);
sparx-test.c~:			if(pp->n_H2 * pp->X_mol > DBL_EPSILON && !zp->children) {
sparx-test.c~:				pp->T_k = 40.0; /* K */
sparx-test.c~:				pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC; /* m^-3 */
sparx-test.c~:				pp->X_mol = 1.0e-8;
sparx-test.c~:				pp->width = 192.0;
sparx-test.c~:					pp->pops[0][i] = SpPhys_BoltzPops(prm.mol, i, pp->T_k);
sparx-test.c~:					GeVec3_X(pp->v_cen, 0) = -1000;
sparx-test.c~:					GeVec3_X(pp->v_cen, 1) = 0;
sparx-test.c~:					GeVec3_X(pp->v_cen, 2) = 0;
sparx-test.c~:						GeVec3_X(pp->v_edge[i], 0) = -1000;
sparx-test.c~:						GeVec3_X(pp->v_edge[i], 1) = 0;
sparx-test.c~:						GeVec3_X(pp->v_edge[i], 2) = 0;
sparx-validate.c:			pp->n_H2 =  1.0e4 * percc; /* cm^-3 -> m^-3 */
sparx-validate.c:			pp->X_mol = xmol; /* fraction */
sparx-validate.c:			pp->T_k = 40.0; /* K */
sparx-validate.c:			GeVec3_X(pp->v_cen, 0) = vgrad * 1000.0 * radii[i]; /* km/s -> m/s */
sparx-validate.c:		zone_pp->non_empty_leaf = (zone_pp->n_H2 * zone_pp->X_mol > 0.0) && !zone->children;
sparx-validate.c:				MPI_Send(&zone_pp->ds, 1, MPI_DOUBLE, 0, Sp_MPITAG, MPI_COMM_WORLD);
sparx-validate.c:				MPI_Recv(&zone_pp->ds, 1, MPI_DOUBLE, (int)zone_rank, Sp_MPITAG, MPI_COMM_WORLD, &mpi_status);
sparx-validate.c:		if(!zone_pp->non_empty_leaf)
sparx-validate.c:				if(pp->non_empty_leaf) {
sparx-validate.c:					zone_pp->ds += t;
sparx-validate.c:		zone_pp->ds /= (double)NRAY;
sparx-validate.c:			pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:			pp->T_k = 40.0;
sparx-validate.c:			pp->X_mol = xmol;
sparx-validate.c:			pp->v_cen.x[0] = vel * dx;
sparx-validate.c:			pp->v_cen.x[1] = vel * dy;
sparx-validate.c:			pp->v_cen.x[2] = vel * dz;
sparx-validate.c:			pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:			pp->T_k = 40.0;
sparx-validate.c:			pp->X_mol = xmol;
sparx-validate.c:			pp->v_cen.x[0] = 0;
sparx-validate.c:			pp->v_cen.x[1] = 0;
sparx-validate.c:			pp->v_cen.x[2] = 0;
sparx-validate.c:		pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:		pp->T_k = 40.0;
sparx-validate.c:		pp->X_mol = xmol;
sparx-validate.c:		pp->v_cen.x[0] = 0;
sparx-validate.c:		pp->v_cen.x[1] = 0;
sparx-validate.c:		pp->v_cen.x[2] = 0;
sparx-validate.c:			pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:			pp->T_k = 40.0;
sparx-validate.c:			pp->X_mol = xmol;
sparx-validate.c:			pp->v_cen.x[0] = 0;
sparx-validate.c:			pp->v_cen.x[1] = 0;
sparx-validate.c:			pp->v_cen.x[2] = 0;
sparx-validate.c:			for(i = 0; i < pp->mol->nlev; i++) {
sparx-validate.c:				pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
sparx-validate.c:			pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:			pp->T_k = 40.0;
sparx-validate.c:			pp->X_mol = 1.0e-8;
sparx-validate.c:			pp->v_cen.x[0] = vel * dx / radius;
sparx-validate.c:			pp->v_cen.x[1] = vel * dy / radius;
sparx-validate.c:			pp->v_cen.x[2] = 0;
sparx-validate.c:			pp->v_cen = GeVec3_Rotate_z(&pp->v_cen, PI / 2.0);
sparx-validate.c:			for(i = 0; i < pp->mol->nlev; i++) {
sparx-validate.c:				pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
sparx-validate.c:			pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:			pp->T_k = 40.0;
sparx-validate.c:			pp->X_mol = xmol;
sparx-validate.c:				pp->v_cen.x[0] = vel * dx / radius;
sparx-validate.c:				pp->v_cen.x[1] = vel * dy / radius;
sparx-validate.c:				pp->v_cen.x[2] = 0;
sparx-validate.c:				pp->v_cen = GeVec3_Rotate_z(&pp->v_cen, PI / 2.0);
sparx-validate.c:			for(i = 0; i < pp->mol->nlev; i++) {
sparx-validate.c:				pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
sparx-validate.c:		pp->n_H2 = 1.0e4 * PHYS_UNIT_MKS_PERCC;
sparx-validate.c:		pp->T_k = 40.0;
sparx-validate.c:		pp->X_mol = xmol;
sparx-validate.c:		pp->v_cen.x[0] = 1000.0;
sparx-validate.c:		pp->v_cen.x[1] = 0;
sparx-validate.c:		pp->v_cen.x[2] = 0;
sparx-validate.c:		for(i = 0; i < pp->mol->nlev; i++) {
sparx-validate.c:			pp->pops[0][i] = SpPhys_BoltzPops(pp->mol, i, pp->T_k);
