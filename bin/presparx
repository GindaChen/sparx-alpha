#!/usr/bin/env python

# usage
def usage():
        print '''
presparx -o < Output File >
         -e : error estimation 
         -p : profile plot
         -v : generate vtk file 
'''

# parser
import sys, getopt
argv = sys.argv[1:]
if not argv:
        usage()
        sys.exit(2)
OutputFile = ''
try:
        opts, args = getopt.getopt(argv,"o:vpe",["--out","out=","--plot","--vtk","--error"])
except getopt.GetoptError:
        print 'can not recognize option : ', args
        usage()
        sys.exit(2)

plot = False
vtk = False
error = False
for opt, arg in opts:
        if   opt in ("-o", "--out"):
                OutputFile = arg
        elif opt in ("-p", "--plot "):
                plot = True
        elif opt in ("-v", "--visual"):
                vtk = True
        elif opt in ("-e", "--error"):
                error = True

# pre-check
from os.path import isfile
convert_mode = 0
Converter = 'converter.py'
GridFile='grid.py'
ModelFile='model.py'
if isfile(Converter):
    convert_mode = 1
elif not isfile(GridFile):
    print '%s not found' % GridFile
    sys.exit(1)
elif not isfile(ModelFile):
    print '%s not found' % ModelFile
    sys.exit(1)

from sparx import pre_mesh 
from sparx import pre_profile

if convert_mode:
    import converter as cvt
    mesh = pre_mesh.from_dataset(cvt)
    phys = pre_profile.from_dataset(mesh,cvt)
else:
    import grid as gr
    import model as md
    # generate mesh
    mesh = pre_mesh.mesh(gr)
    # mapping physical model
    phys = pre_profile.profile(mesh,md)

# double check the error of the model
if error:
        from sparx import pre_error
        pre_error.error(mesh,phys)

# visualization
if plot:
        from sparx import pre_visual
        pre_visual.plot(mesh,phys)

if vtk:
        from sparx import pre_visual
        pre_visual.vtk_output(mesh,phys)

# export HDF
if OutputFile:
        from sparx import pre_hdf
        pre_hdf.export(mesh,phys,OutputFile)
        print 'wrote out "%s"' %OutputFile







