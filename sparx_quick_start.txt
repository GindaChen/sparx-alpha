# =====================================================
# |          The Quick Guidance for SPARX             |
# |                   I-Ta Hsieh                      |
# |                 < 2016.3.12 >                     |
# =====================================================


#######################################################
#                    INSTALLATION                     #
#######################################################

-- 1. DOWNLOAD THE SOURCE CODE
      * # download the source code from 
        https://github.com/itahsieh/sparx-alpha
        
      * # or just command
        git init
        git clone https://github.com/itahsieh/sparx-alpha.git

-- 2. LOADING THE LIBRARY AND DEPENDENT PACKAGES
      THEN INSTALL

    * If you are the user/developer on TIARA's cluster
        # enter the directory and install 
        cd sparx-alpha
        ./tiara-install.sh

    * If you are just the user for the applicational 
      purpose on TIARA, try to load the SPARX module 
      directly. Then just modify the preprocessor script
      to what you want. 
        # load sparx module
        module add sparx
        
    * If you are the user on IAA's cluster
        # enter the directory and install 
        cd sparx-alpha
        ./iaa-install.sh
        
    * If you are using ubuntu 14.04, 
        # enter the directory and install 
        cd sparx-alpha
        ./ubuntu-install.sh
  
-- 3. TEST
        ./test.sh


#######################################################
#                    THE TUTORIAL                     #
#######################################################
# PREPROCESSOR : build a Shu's collapsing cloud
sparx run task_shu1d \
out=model \
n_max='1e12m^-3' \
ndiv=64 \
abundance=1e-9 \
Vin='0.1kms^-1'

# non-LTE molecular excitation solver : AMC
sparx run task_amc \
source=model \
out=pops molec='hco+' lte='True' snr=20 tolerance=5e-3

# making the image
sparx run task_lineobs \
source=pops \
out=map \
line=0 \
dist='1kpc' \
cell="['1asec','1asec']" \
npix="[128,128]"



#######################################################
#          HOW TO CREATE YOUR OWN SIMULATION          #
#######################################################

# create your own task into the tasks file (For creating 1D model)
sparx-alpha/lib/sparx/tasks.py

# A spherical 2D/3D preprocessor template
pre-sparx/SPH2D_preprocessor.py

# A nested 3D Cartesian preprocessor template
pre-sparx/nested3D.py


#######################################################
#               THINGS ABOUT NUMERICS                 #
#######################################################

 - The most dominating numerical error in the scheme 
   * AMC -- Monte Carlo ray sampling 
         -- most computational demanding 
            (0.5th order of accuracy in MC method)
         -- The other numerical errors could be eliminated easier 

 - How to determine and request the AMC error?
   * How large is the observational noise? 
     -- set the numerical SNR over the instrumental SNR
   * "snr" flag 
     -- typical value : 20

 - How are the other errors in the whole simulation?
   * preprocessor : 
     -- Error of FEM (Finite Element method)
     -- How many number of cell should we adopt?
        Suggestion : test the convergency of the total mass
                     make the error 1 order less than MC noise 
   * AMC solver : 
     -- MC noise : number of rays ('snr' flag) 
     -- ALI stopping criteria : 
        iteration error ('tolerance' flag)
        make the error 1 order less than MC noise
     -- Detailed balance loop : 
        inner iteration error 
        ('minpop' flag, typically 1e-6)
   
   * Image mapping : 
     --  How many resolution should be used when ray sampling?
         Suggestion : 
         Twice finer than the âˆ†x in the grding of physical model
         ('cell' flag to refine the pixel size)      
         Could double the sampling to check 
         if there's significant change of the emission
         'subres' flag could be used for sub-level and 
         specific region sampling
 


